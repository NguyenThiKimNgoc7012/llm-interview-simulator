from pymongo import MongoClient
from pymongo.errors import ConnectionFailure
from datetime import datetime
from bson import Binary


# K·∫øt n·ªëi ƒë·∫øn MongoDB
try:
    client = MongoClient("mongodb://localhost:27017/")  
    # Ki·ªÉm tra k·∫øt n·ªëi
    client.admin.command('ping')
    print("ƒê√£ k·∫øt n·ªëi ƒë·∫øn MongoDB.")
except ConnectionFailure as e:
    print(f"L·ªói k·∫øt n·ªëi ƒë·∫øn MongoDB: {e}")

# Ch·ªçn database v√† collection
db = client["interview_db"]  
collection = db["interview_sessions"]# ph·ªèng v·∫•n qua text 
collection_cv = db["applicants"] 
collection_audio = db["interview_audio_sessions"]
collection_script = db["interview_scripts"]
collection_evaluation = db["interview_evaluation"]
collection_history_cv = db["interview_history_cv"] 
 
def save_interview_data(session_id, messages, name, job_title, level, language, job_description):
    qa_pairs = []
    q = None
    for msg in messages:
        if msg["role"] == "bot" and not msg["text"].startswith("üëã"):
            q = msg["text"]
        elif msg["role"] == "user" and q:
            qa_pairs.append({"question": q, "answer": msg["text"]})
            q = None

    # L∆∞u tr·ªØ v√†o MongoDB
    collection.insert_one({
        "session_id": session_id,
        "name": name,
        "job_title": job_title,
        "level": level,
        "language": language,
        "job_description": job_description,
        "qa_pairs": qa_pairs,
        "interview_datetime": datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S'), 
        "timestamp": datetime.utcnow()
    })
# L∆∞u ph·ªèng v·∫•n CV


def save_applicant_info(session_id, name, job_title, job_description, cv_file_path):
    """
    L∆∞u tr·ªØ th√¥ng tin ·ª©ng vi√™n v√† CV v√†o MongoDB
    """
    with open(cv_file_path, "rb") as file:
        cv_data = file.read()  

    applicant_data = {
        "session_id": session_id,
        "name": name,
        "job_title": job_title,
        "job_description": job_description,
        "cv_file": Binary(cv_data), 
        "timestamp": datetime.utcnow() 
    }

    # L∆∞u v√†o MongoDB
    collection_cv.insert_one(applicant_data)
    print(f"Th√¥ng tin ·ª©ng vi√™n {name} ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o MongoDB.")

def save_interview_audio_data(session_id, name, job_title, job_description, audio_file_path, transcription, emotions, confidence_score, feedback, logs, summary):
    """
    L∆∞u tr·ªØ cu·ªôc h·ªôi tho·∫°i gi·ªçng n√≥i v√†o MongoDB (bao g·ªìm STT, c·∫£m x√∫c, ƒëi·ªÉm t·ª± tin, ph·∫£n h·ªìi, nh·∫≠t k√Ω v√† t√≥m t·∫Øt)
    """
    try:
       
        with open(audio_file_path, "rb") as file:
            audio_data = file.read()

        
        audio_data_doc = {
            "session_id": session_id,
            "name": name,
            "job_title": job_title,
            "job_description": job_description,
            "audio_file": Binary(audio_data), 
            "transcription": transcription,  
            "emotions": emotions, 
            "confidence_score": confidence_score,  
            "feedback": feedback, 
            "logs": logs,  
            "summary": summary, 
            "timestamp": datetime.utcnow()  
        }

        # L∆∞u v√†o MongoDB
        collection_audio.insert_one(audio_data_doc)
        print(f"Ph·ªèng v·∫•n qua gi·ªçng n√≥i c·ªßa ·ª©ng vi√™n {name} ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o MongoDB.")
        save_evaluation_data(session_id, name, emotions, confidence_score, feedback, logs, summary)
    
    except Exception as e:
        print(f"L·ªói khi l∆∞u d·ªØ li·ªáu √¢m thanh v√†o MongoDB: {e}")

def save_interview_script(session_id, messages):
    """
    L∆∞u tr·ªØ script ph·ªèng v·∫•n (c√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi) v√†o MongoDB
    """
    script_data = []
    q = None
    for msg in messages:
        if msg["role"] == "bot" and not msg["text"].startswith("üëã"):
            q = msg["text"]
        elif msg["role"] == "user" and q:
            script_data.append({"question": q, "answer": msg["text"]})
            q = None

    script_data_doc = {
        "session_id": session_id,
        "script": script_data,
        "timestamp": datetime.utcnow()  
    }

    # L∆∞u v√†o MongoDB
    collection_script.insert_one(script_data_doc)
    print(f"Script ph·ªèng v·∫•n c·ªßa ·ª©ng vi√™n ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o MongoDB.")

def save_evaluation_data(session_id, name, emotions, confidence_score, feedback, logs, summary):
    """
    L∆∞u tr·ªØ k·∫øt qu·∫£ ƒë√°nh gi√° c·∫£m x√∫c, m·ª©c ƒë·ªô t·ª± tin, ph·∫£n h·ªìi, nh·∫≠t k√Ω v√† t√≥m t·∫Øt cu·ªôc ph·ªèng v·∫•n v√†o MongoDB
    """
    evaluation_data = {
        "session_id": session_id,
        "name": name,
        "emotions": emotions, 
        "confidence_score": confidence_score,  
        "feedback": feedback,  
        "logs": logs, 
        "summary": summary,  
        "timestamp": datetime.utcnow()  
    }

    collection_evaluation.insert_one(evaluation_data)
    print(f"ƒê√°nh gi√° c·∫£m x√∫c v√† m·ª©c ƒë·ªô t·ª± tin c·ªßa ·ª©ng vi√™n {name} ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o MongoDB.")

def save_interview_history_cv(session_id, name, job_title, interview_date, questions, answers, feedback, dashboard_data):
    """
    L∆∞u l·ªãch s·ª≠ ph·ªèng v·∫•n v√†o MongoDB khi ph·ªèng v·∫•n b·∫Øt ƒë·∫ßu.
    Ch∆∞a c√≥ ƒëi·ªÉm s·ªë v√¨ ph·ªèng v·∫•n ch∆∞a k·∫øt th√∫c.
    """
    interview_data = {
        "session_id": session_id,
        "name": name,
        "job_title": job_title,
        "interview_date": interview_date,
        "questions": questions,
        "answers": answers,
        "feedback": feedback,
        "dashboard_data": dashboard_data,
        "score": None,  
        "communication_score": None,  
        "fit_score": None 
    }
    collection_history_cv.insert_one(interview_data)  
    print(f"L·ªãch s·ª≠ phi√™n ph·ªèng v·∫•n cho {name} ƒë√£ ƒë∆∞·ª£c l∆∞u (ch∆∞a c√≥ ƒëi·ªÉm s·ªë).")


def get_audio_file(session_id):
    try:
        audio_data_doc = collection_audio.find_one({"session_id": session_id})

        if audio_data_doc:
            audio_data = audio_data_doc["audio_file"]
            audio_file_path = f"static/audio/{session_id}_audio.mp3"
            with open(audio_file_path, "wb") as file:
                file.write(audio_data)

            print(f"T·ªáp √¢m thanh {audio_file_path} ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng.")
            return f"{session_id}_audio.mp3"
        else:
            print(f"Kh√¥ng t√¨m th·∫•y t·ªáp √¢m thanh cho session_id: {session_id}.")
            return None

    except Exception as e:
        print(f"L·ªói khi t·∫£i t·ªáp √¢m thanh t·ª´ MongoDB: {e}")
        return None

